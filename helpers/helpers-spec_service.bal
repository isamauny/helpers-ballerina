// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;
import ballerina/uuid;
import ballerina/mime;
import ballerina/log;

//configurable string OPENAI_KEY = ?;


listener http:Listener ep0 = new (8080, config = {host: "localhost"});

service / on ep0 {
    # Returns the client IP address.
    # + return - returns IP message or error messahe 
    #
    # http:Ok (Get the client IP address.)
    # http:NotFound (Response for any error)
    resource function get ip(@http:CallerInfo {respondType:ip_response}  http:Caller hc) returns error? {
        ip_response response;
        do {
             response =  { "origin" : hc.remoteAddress.ip};
        } on fail {
             response = {"origin" : "unknown"};
        }
        check hc->respond(response);
    }

    # Returns the value of the user-agent header
    # the http:header annotation ensures that a default error message will be automatically
    # created and returned if the header can't be found.
    # + return - returns can be any of following types 
    # http:Ok (Get a UUID V4.)
    resource function get user\-agent(@http:Header string user\-agent) returns ua_response {
            ua_response response =  { user\-agent };
            return response;
    }

    # Returns a unique ID as per UUID v4 spec
    #
    # + return - returns can be any of following types 
    # http:Ok (Get a UUID V4.)
    # http:DefaultStatusCodeResponse (Response for any error)
    resource function get uuid() returns uuid_response|Error_responseDefault {
        
        string tempUuid = uuid:createRandomUuid();
        uuid_response response = { "uuid" : tempUuid};

        return response;
    }

    resource function post 'base64/decode/[string value]() returns Base64_responseOk|Error_responseBadRequest {
        //byte[] valueAsBytes = value.toBytes();
        log:printDebug("Inbound Value  " + value);
        string|error decodedValue = mime:base64Decode(value).ensureType(string);                    

        if (decodedValue is string) {
            Base64_responseOk response = {body: {"value": decodedValue} };
            log:printDebug ("Decoded Value OK  " + decodedValue);
            return response;
        } else {
            Error_responseBadRequest response = {body: {"message": "unable to decode", "code": "x124"}};
            log:printDebug ("Error text " + decodedValue.toString());
            return response; 
        }
    }

    resource function post 'base64/encode/[string value]() returns Base64_responseOk|Error_responseBadRequest {
        log:printDebug ("Inbound Value  " + value);
        string|error encodedValue = mime:base64Encode(value).ensureType(string);
        
        
        if (encodedValue is string) {
            Base64_responseOk response = {body: {"value": encodedValue} };
            log:printDebug ("Encoded Value OK  " + encodedValue);
            return response;
        }
        else {
            Error_responseBadRequest response = {body: {"message": "unable to encode", "code": "x123"}};
            log:printDebug ("Error text  " + encodedValue.toString());
            return response; 
        }
    }
}
